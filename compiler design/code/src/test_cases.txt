// Sample Tiny_PL function definitions

 // must give max2 before max4

 int max2(int x, int y) {
    if (x > y)
	return x;
    else  
	return y;
 }

 int max4(int w, int x, int y, int z) {
    int t1, t2;
    t1 = max2(w,x);
    t2 = max2(y,z);
    return max2(t1,t2);
 }

	 
// factorial function

int fact(int n) {
   int i, f;
   i = 1;
   f = 1;
   while (i < n) {
     i = i + 1;
     f= f * i;
   }
   return f;
}




// McCarthy 91 function

 int f91(int n) {
       int ans, temp;
       if (n > 100)
           ans = n-10; 
       else {
	     temp = f91(n+11);
             ans = f91(temp); 
       }  
       return ans;
  }
 
// greatest common divisor

int gcd(int x, int y) {

	while (x != y) 
		if (x > y) 
      	      x = x - y; 
		else  y = y - x; 
	
	return x;
}

// test for friendly numbers - lookup on the web

int friends(int n1, int n2) {

    int i, num1, den1, g1, num2, den2, g2;

    num1 = 0;
    i = 1;
    while (i <= n1) {
       if ((n1/i)*i == n1)
          num1 = num1 + i;
       i = i + 1;
    }

    print num1;
    print n1;

    g1 = gcd(num1, n1);
    num1 = num1 / g1;
    den1 = n1 / g1;

    num2 = 0;
    i = 1;

    while (i <= n2) {
       if ((n2/i)*i == n2)
          num2 = num2 + i;
       i = i + 1;
    }

    print num2;
    print n2;

    g2 = gcd(num2, n2);
    num2 = num2 / g2;
    den2 = n2 / g2;

    
    if (num1 == num2)
       if (den1 == den2)
		return 1;

    return 0;
}

// integer square root of a number;  used in isprime below

int isqrt(int n) {
   int sq, lo, hi;
   hi = 1;
   while (hi*hi < n) 
      hi = hi + 1;
   lo = hi-1;
   if (n - lo*lo < hi*hi - n) 
      sq = lo;
   else 
      sq = hi;
   return sq;
}

// used below in isprime

int test(int n,int sq, int i) {
     if (i > sq)
         return 1;
     else
    	   if ((n/i)*i == n)
	       return 0;
	   else 
	       return test(n,sq,i+1);
}

// prime number test: must give isqrt and test before isprime

int isprime(int n) {    // 1 = true and 0 = false, as in C
   int sq;
   sq = isqrt(n);
   return test(n,sq,2);
}

// print all primes until n

int primes(int n) {   
    int i, p;
    i = 2;
    while(i <= n) {
	if (isprime(i) == 1) {
	   p = i;
           print p;
      }
	i = i+1;
    }
   return p;
}

end

    
